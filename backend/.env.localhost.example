# Email Helper Backend - Localhost Development Configuration
# Copy this file to backend/.env for localhost backend development
# This configuration is optimized for local development with COM backend (Outlook)

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Application name displayed in API documentation
APP_NAME="Email Helper API"

# API version
APP_VERSION="1.0.0"

# Debug mode - enables detailed error messages and auto-reload
# Set to true for development, false for production
DEBUG=true

# =============================================================================
# SERVER SETTINGS
# =============================================================================

# Host address - 0.0.0.0 allows connections from all network interfaces
# Use 127.0.0.1 to restrict to localhost only
HOST=0.0.0.0

# Port number for the API server
PORT=8000

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Secret key used for JWT token signing and encryption
# For localhost development, this can be a simple value
# IMPORTANT: Use a strong, random secret in production!
SECRET_KEY=localhost-development-secret-key-change-in-production

# JWT signing algorithm (HS256 is standard for symmetric keys)
ALGORITHM=HS256

# JWT access token expiration time (in minutes)
# Access tokens are short-lived for security
ACCESS_TOKEN_EXPIRE_MINUTES=30

# JWT refresh token expiration time (in days)
# Refresh tokens allow users to get new access tokens without re-authenticating
REFRESH_TOKEN_EXPIRE_DAYS=30

# =============================================================================
# EMAIL PROVIDER CONFIGURATION
# =============================================================================

# Email provider selection
# Options: "com" (Outlook COM for localhost) or "graph" (Microsoft Graph for cloud)
# For localhost development, use "com"
EMAIL_PROVIDER=com

# Use COM backend for localhost operation
# Set to true to use local Outlook installation via COM interface
USE_COM_BACKEND=true

# Require user authentication
# Set to false for localhost development to skip authentication
# Set to true for production environments
REQUIRE_AUTHENTICATION=false

# =============================================================================
# DATABASE SETTINGS
# =============================================================================

# Database connection URL
# For development, we use SQLite stored in the runtime_data directory
# Format: sqlite:///./runtime_data/email_helper_history.db
# For production, consider PostgreSQL: postgresql://user:pass@host:port/dbname
DATABASE_URL=sqlite:///./runtime_data/email_helper_history.db

# Database will be automatically created in the runtime_data directory
# The directory will be created if it doesn't exist

# =============================================================================
# CORS (Cross-Origin Resource Sharing) SETTINGS
# =============================================================================

# Allowed origins for CORS requests
# List of URLs that can make requests to this API
# For localhost development, include both common dev server ports
CORS_ORIGINS=["http://localhost:3000", "http://localhost:5173", "http://localhost:8081"]

# Allow credentials (cookies, authorization headers) in CORS requests
CORS_ALLOW_CREDENTIALS=true

# Allowed HTTP methods for CORS requests
CORS_ALLOW_METHODS=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"]

# Allowed headers in CORS requests
CORS_ALLOW_HEADERS=["*"]

# =============================================================================
# AZURE OPENAI SETTINGS (Optional - Required for AI Features)
# =============================================================================

# Azure OpenAI service endpoint
# Get this from Azure Portal > Your OpenAI Resource > Keys and Endpoint
# Example: https://your-resource-name.openai.azure.com/
AZURE_OPENAI_ENDPOINT=

# Azure OpenAI API key
# Get this from Azure Portal > Your OpenAI Resource > Keys and Endpoint
# Click "Show Keys" and copy either Key 1 or Key 2
AZURE_OPENAI_API_KEY=

# Azure OpenAI deployment name
# This is the name you gave your model deployment in Azure OpenAI Studio
# Common deployments: gpt-4o, gpt-4, gpt-35-turbo
AZURE_OPENAI_DEPLOYMENT=gpt-4o

# Azure OpenAI API version
# Specifies the API version to use
# Use the latest stable version for best results
AZURE_OPENAI_API_VERSION=2024-02-01

# =============================================================================
# MICROSOFT GRAPH API SETTINGS (Not Required for Localhost COM Backend)
# =============================================================================

# These settings are only needed when EMAIL_PROVIDER=graph (cloud deployment)
# For localhost development with COM backend, leave these commented out

# Azure AD Application (Client) ID
# Get from Azure Portal > Azure Active Directory > App registrations
# GRAPH_CLIENT_ID=

# Azure AD Application Client Secret
# Get from Azure Portal > App registrations > Certificates & secrets
# GRAPH_CLIENT_SECRET=

# Azure AD Directory (Tenant) ID
# Get from Azure Portal > Azure Active Directory > Overview
# GRAPH_TENANT_ID=

# OAuth 2.0 redirect URI for authentication callback
# Must match the redirect URI configured in Azure AD app registration
# GRAPH_REDIRECT_URI=http://localhost:8000/auth/callback

# Required API Permissions for Graph API (configure in Azure Portal):
# - Mail.Read - Read user mail
# - Mail.ReadWrite - Read and write access to user mail
# - Mail.Send - Send mail as a user
# - User.Read - Sign in and read user profile

# =============================================================================
# LOCALHOST COM BACKEND NOTES
# =============================================================================

# Prerequisites for COM Backend:
# 1. Windows 10 or Windows 11 operating system
# 2. Microsoft Outlook installed and configured with an email account
# 3. Python 3.9 or higher with pywin32 package installed
# 4. Outlook must be running or able to start automatically

# COM Backend Advantages:
# - No cloud API credentials needed
# - Works with local Outlook installation
# - No authentication required for development
# - Direct access to local email data
# - Faster for local development and testing

# COM Backend Limitations:
# - Windows only (requires win32com library)
# - Requires Outlook to be installed
# - Cannot be deployed to cloud (Linux) environments
# - Limited to single user (the logged-in Windows user)

# =============================================================================
# RUNNING THE BACKEND
# =============================================================================

# 1. Copy this file to backend/.env
# 2. Install dependencies:
#    pip install -r requirements.txt
# 3. Run the backend:
#    python run_backend.py
#    OR
#    uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
# 4. Access API documentation:
#    http://localhost:8000/docs (Swagger UI)
#    http://localhost:8000/redoc (ReDoc)
# 5. Health check:
#    http://localhost:8000/health

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# If you get COM errors:
# - Make sure Outlook is installed and configured
# - Try running Outlook manually first
# - Check that your Outlook profile is set up correctly

# If you get database errors:
# - Make sure the runtime_data directory exists
# - Check file permissions on the database file
# - Try deleting the database file to start fresh

# If you get import errors:
# - Make sure all dependencies are installed: pip install -r requirements.txt
# - Check that you're using Python 3.9 or higher

# =============================================================================
# SECURITY WARNING
# =============================================================================

# This configuration is for LOCAL DEVELOPMENT ONLY!
# Do not use these settings in production environments!
# Key differences for production:
# - Use a strong, random SECRET_KEY
# - Set DEBUG=false
# - Enable REQUIRE_AUTHENTICATION=true
# - Use proper database (PostgreSQL, MySQL)
# - Restrict CORS_ORIGINS to specific domains
# - Use HTTPS in production
# - Enable proper logging and monitoring
