version: '3.8'

services:
  # FastAPI backend service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: email-helper-api
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=Email Helper API
      - DEBUG=false
      - DATABASE_URL=postgresql://user:password@db:5432/email_helper
      - REDIS_URL=redis://redis:6379
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT=${AZURE_OPENAI_DEPLOYMENT:-gpt-4o}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2024-02-01}
      - GRAPH_CLIENT_ID=${GRAPH_CLIENT_ID}
      - GRAPH_CLIENT_SECRET=${GRAPH_CLIENT_SECRET}
      - GRAPH_TENANT_ID=${GRAPH_TENANT_ID}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./runtime_data:/app/runtime_data
    restart: unless-stopped
    networks:
      - email-helper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery worker for background processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: email-helper-worker
    command: celery -A backend.workers.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/email_helper
      - REDIS_URL=redis://redis:6379
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT=${AZURE_OPENAI_DEPLOYMENT:-gpt-4o}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2024-02-01}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./runtime_data:/app/runtime_data
    restart: unless-stopped
    networks:
      - email-helper-network

  # WebSocket service for real-time updates
  websocket:
    build:
      context: .
      dockerfile: Dockerfile
      target: production  
    container_name: email-helper-websocket
    command: uvicorn backend.workers.websocket_server:app --host 0.0.0.0 --port 8001
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - email-helper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: email-helper-db
    environment:
      - POSTGRES_DB=email_helper
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - email-helper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d email_helper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: email-helper-redis
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - email-helper-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: email-helper-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - api
      - websocket
    restart: unless-stopped
    networks:
      - email-helper-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  email-helper-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
