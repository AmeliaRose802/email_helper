name: Merge Validation

on:
  pull_request:
    branches:
      - master
      - main
      - develop
  push:
    branches:
      - master
      - main
      - develop
  workflow_dispatch:  # Allow manual triggers

jobs:
  test:
    name: Run Tests
    runs-on: windows-latest  # Windows required for pywin32/Outlook COM
    timeout-minutes: 30
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
      fail-fast: false  # Continue testing other versions if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better git operations
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Cache pip dependencies
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
        shell: pwsh
      
      - name: Create required directories
        run: |
          New-Item -ItemType Directory -Force -Path runtime_data/ai_summaries
          New-Item -ItemType Directory -Force -Path runtime_data/database
          New-Item -ItemType Directory -Force -Path runtime_data/tasks
          New-Item -ItemType Directory -Force -Path runtime_data/user_feedback
          New-Item -ItemType Directory -Force -Path user_specific_data
        shell: pwsh
      
      - name: Set up test environment
        run: |
          # Create minimal config for tests
          $envContent = @"
          AZURE_OPENAI_ENDPOINT=https://test.openai.azure.com
          AZURE_OPENAI_API_KEY=test_key
          AZURE_OPENAI_DEPLOYMENT=test_deployment
          TEST_MODE=true
          "@
          $envContent | Out-File -FilePath .env -Encoding utf8
        shell: pwsh
      
      - name: Run essential tests
        run: |
          python -m pytest test/essential_tests.py -v --tb=short --maxfail=5 --junitxml=test-results-essential.xml
        shell: pwsh
        continue-on-error: false
      
      - name: Run core test suite
        run: |
          python -m pytest test/core_test_suite.py -v --tb=short --maxfail=10 --junitxml=test-results-core.xml
        shell: pwsh
        continue-on-error: true  # Don't fail the build if core tests have issues
      
      - name: Run backend tests
        run: |
          python -m pytest backend/tests/ -v --tb=short --maxfail=10 --junitxml=test-results-backend.xml
        shell: pwsh
        continue-on-error: true  # Backend tests may need additional setup
      
      - name: Generate coverage report
        if: always()
        run: |
          python -m pytest test/essential_tests.py --cov=src --cov=backend --cov-report=xml --cov-report=html --cov-report=term-missing
        shell: pwsh
        continue-on-error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results-*.xml
            htmlcov/
            .coverage
          retention-days: 30
      
      - name: Upload coverage to artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/
          retention-days: 30
      
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        with:
          files: test-results-*.xml
          check_name: Test Results (Python ${{ matrix.python-version }})
          comment_mode: off  # Don't spam PR comments
  
  code-quality:
    name: Code Quality Checks
    runs-on: windows-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 pylint mypy
        shell: pwsh
      
      - name: Check code formatting with Black
        run: |
          black --check --diff src/ backend/ test/ --exclude="__pycache__|.pyc|migrations"
        shell: pwsh
        continue-on-error: true  # Don't fail build on formatting issues
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src/ backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/ backend/ --count --exit-zero --max-complexity=15 --max-line-length=120 --statistics
        shell: pwsh
        continue-on-error: true
  
  dependency-security:
    name: Security Scan
    runs-on: windows-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety
        shell: pwsh
      
      - name: Check dependencies for vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check --json || true
        shell: pwsh
        continue-on-error: true
  
  validation-summary:
    name: Validation Summary
    needs: [test, code-quality, dependency-security]
    runs-on: windows-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          $testStatus = "${{ needs.test.result }}"
          $qualityStatus = "${{ needs.code-quality.result }}"
          $securityStatus = "${{ needs.dependency-security.result }}"
          
          Write-Host "Test Status: $testStatus"
          Write-Host "Code Quality Status: $qualityStatus"
          Write-Host "Security Status: $securityStatus"
          
          # Fail if essential tests failed
          if ($testStatus -ne "success") {
            Write-Host "::error::Essential tests failed. Merge validation failed."
            exit 1
          }
          
          # Warn but don't fail on quality/security issues
          if ($qualityStatus -ne "success") {
            Write-Host "::warning::Code quality checks had issues."
          }
          
          if ($securityStatus -ne "success") {
            Write-Host "::warning::Security scan had issues."
          }
          
          Write-Host "âœ… Merge validation passed!"
        shell: pwsh
