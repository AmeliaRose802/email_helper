# Email Helper Frontend - Localhost Development Configuration
# Copy this file to frontend/.env.local for local development
# Vite automatically loads .env.local for development

# =============================================================================
# LOCALHOST MODE SETTINGS
# =============================================================================

# Enable localhost mode - optimizes for local development
# Set to true for development, false for production
VITE_LOCALHOST_MODE=true

# =============================================================================
# API CONFIGURATION
# =============================================================================

# Backend API base URL
# Points to the locally running backend server
# Make sure the backend is running on this address
VITE_API_BASE_URL=http://localhost:8000

# API endpoints will be automatically constructed:
# - Authentication: http://localhost:8000/auth/*
# - Email operations: http://localhost:8000/api/emails/*
# - AI processing: http://localhost:8000/api/ai/*
# - Task management: http://localhost:8000/api/tasks/*

# =============================================================================
# AUTHENTICATION SETTINGS
# =============================================================================

# Skip authentication in localhost mode
# Set to true for development to bypass login
# Set to false for production or when testing authentication flow
VITE_SKIP_AUTH=true

# When SKIP_AUTH is true:
# - No login required to access the application
# - Mock user credentials will be used
# - Authentication tokens are not validated
# - Useful for UI development without backend authentication

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Application title (displayed in browser tab and UI)
VITE_APP_TITLE=Email Helper

# Application environment
# Options: development, production, test
# Vite automatically sets this based on the command used
# VITE_APP_ENV=development

# =============================================================================
# DEVELOPMENT SERVER SETTINGS
# =============================================================================

# Note: Vite dev server settings are configured in vite.config.ts
# Default dev server runs on http://localhost:5173
# To change the port, modify vite.config.ts or use: npm run dev -- --port 3000

# =============================================================================
# OPTIONAL FEATURE FLAGS
# =============================================================================

# Enable debug logging in browser console
# VITE_DEBUG_LOGGING=true

# Enable mock data mode (for development without backend)
# VITE_USE_MOCK_DATA=false

# Enable experimental features
# VITE_ENABLE_EXPERIMENTAL=false

# =============================================================================
# AZURE OPENAI SETTINGS (Frontend Display Only)
# =============================================================================

# These settings are managed by the backend
# The frontend can display this information in settings/about pages

# Show AI features in the UI
# VITE_ENABLE_AI_FEATURES=true

# =============================================================================
# VITE ENVIRONMENT VARIABLES
# =============================================================================

# Important Notes about Vite Environment Variables:
#
# 1. All environment variables must be prefixed with VITE_ to be exposed to the frontend
# 2. Variables without VITE_ prefix will not be available in the browser
# 3. Changes to .env.local require restarting the dev server (npm run dev)
# 4. Environment variables are embedded at build time, not runtime
# 5. Never store sensitive credentials in frontend environment variables
#    (they are visible in the browser!)

# =============================================================================
# RUNNING THE FRONTEND
# =============================================================================

# Prerequisites:
# 1. Node.js 18+ installed
# 2. Backend server running on http://localhost:8000

# Quick Start:
# 1. Copy this file to frontend/.env.local
# 2. Install dependencies: npm install
# 3. Start development server: npm run dev
# 4. Open browser to http://localhost:5173 (or the port shown in terminal)

# Available npm scripts:
# - npm run dev          Start development server with hot reload
# - npm run build        Build for production
# - npm run preview      Preview production build locally
# - npm run lint         Check code with ESLint
# - npm run lint:fix     Fix ESLint issues automatically
# - npm run format       Format code with Prettier
# - npm run test         Run unit tests with Vitest

# =============================================================================
# PROXY CONFIGURATION
# =============================================================================

# The frontend uses Vite's proxy feature to forward API requests to the backend
# This is configured in vite.config.ts:
#
# Proxy rules:
# - /auth/* → http://localhost:8000/auth/*
# - /api/*  → http://localhost:8000/api/*
#
# This prevents CORS issues during development and matches production routing

# =============================================================================
# LOCALHOST DEVELOPMENT WORKFLOW
# =============================================================================

# Typical Development Flow:
#
# 1. Start Backend:
#    cd /path/to/email_helper
#    python run_backend.py
#    Backend will run on http://localhost:8000
#
# 2. Start Frontend (in a new terminal):
#    cd /path/to/email_helper/frontend
#    npm run dev
#    Frontend will run on http://localhost:5173
#
# 3. Development:
#    - Frontend hot-reloads automatically on file changes
#    - Backend auto-reloads when DEBUG=true
#    - Check backend logs for API request/response details
#    - Use browser DevTools for frontend debugging
#
# 4. Access Points:
#    - Frontend UI: http://localhost:5173
#    - Backend API Docs: http://localhost:8000/docs
#    - Backend Health: http://localhost:8000/health

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# If frontend can't connect to backend:
# - Verify backend is running: curl http://localhost:8000/health
# - Check VITE_API_BASE_URL matches backend port
# - Look for CORS errors in browser console
# - Ensure backend CORS_ORIGINS includes frontend URL

# If changes don't appear:
# - Make sure you saved the file
# - Check terminal for build errors
# - Try restarting the dev server
# - Clear browser cache (Ctrl+Shift+R or Cmd+Shift+R)

# If environment variables don't work:
# - Verify variable name starts with VITE_
# - Restart the dev server after changing .env.local
# - Check that .env.local is in the frontend directory (not root)
# - Use console.log(import.meta.env.VITE_*) to verify values

# =============================================================================
# PRODUCTION BUILD NOTES
# =============================================================================

# For production builds, create frontend/.env.production with:
# VITE_LOCALHOST_MODE=false
# VITE_API_BASE_URL=https://api.yourdomain.com
# VITE_SKIP_AUTH=false
# VITE_APP_TITLE=Email Helper

# Build for production:
# npm run build

# The build output will be in frontend/dist/
# Deploy the dist/ directory to your web server

# =============================================================================
# SECURITY NOTES
# =============================================================================

# IMPORTANT: Frontend environment variables are NOT secret!
# - All VITE_* variables are embedded in the JavaScript bundle
# - Anyone can view them in the browser developer tools
# - Never put API keys, passwords, or secrets in frontend .env files
# - Sensitive credentials should only be in backend configuration
# - The backend should validate all requests and handle authentication

# This configuration is for LOCAL DEVELOPMENT ONLY
# Production environments should:
# - Enable authentication (VITE_SKIP_AUTH=false)
# - Use proper API URLs (not localhost)
# - Implement proper security measures
# - Use HTTPS for all communication
